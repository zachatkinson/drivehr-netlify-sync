name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audits daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Type checking
        run: pnpm run type-check

      - name: Linting
        run: pnpm run lint

      - name: Format checking
        run: pnpm run format:check

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Unit and Integration Tests
  test:
    name: ${{ matrix.test-suite.name }}
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        test-suite:
          # Library Tests
          - name: 'Config'
            pattern: 'test/lib/config.test.ts'
          - name: 'HTTP-Client'
            pattern: 'test/lib/http-client.test.ts'
          - name: 'Environment-Utilities'
            pattern: 'test/lib/env.test.ts'
          - name: 'Logger'
            pattern: 'test/lib/logger.test.ts'
          - name: 'Utils'
            pattern: 'test/lib/utils.test.ts'
          - name: 'Job-Fetch-Utils'
            pattern: 'test/lib/job-fetch-utils.test.ts'
          - name: 'Performance-Monitor'
            pattern: 'test/lib/performance-monitor.test.ts'
          - name: 'Telemetry'
            pattern: 'test/lib/telemetry.test.ts'
          - name: 'Telemetry-Init'
            pattern: 'test/lib/telemetry-init.test.ts'

          # Service Tests
          - name: 'Job-Fetcher-Service'
            pattern: 'test/services/job-fetcher.test.ts'
          - name: 'HTML-Parser-Service'
            pattern: 'test/services/html-parser.test.ts'
          - name: 'WordPress-Client-Service'
            pattern: 'test/services/wordpress-client.test.ts'
          - name: 'Playwright-Scraper-Service'
            pattern: 'test/services/playwright-scraper.test.ts'

          # Function Tests
          - name: 'Sync-Jobs-Function'
            pattern: 'test/functions/sync-jobs.test.ts'
          - name: 'Health-Check-Function'
            pattern: 'test/functions/health-check.test.ts'
          - name: 'Manual-Trigger-Function'
            pattern: 'test/functions/manual-trigger.test.ts'
          - name: 'Manual-Trigger-Integration'
            pattern: 'test/functions/manual-trigger-integration.test.ts'

          # Script Tests
          - name: 'Scrape-and-Sync-Script'
            pattern: 'test/scripts/scrape-and-sync.test.ts'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            package.json

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ${{ matrix.test-suite.name }}
        run: pnpm exec vitest run ${{ matrix.test-suite.pattern }} --coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: ${{ matrix.test-suite.name }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.test-suite.name }}
          path: |
            coverage/
            test-report.junit.xml
          retention-days: 30

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Verify build output
        run: |
          if [ ! -f "dist/functions/sync-jobs.mjs" ]; then
            echo "Build output missing - sync-jobs.mjs not found"
            exit 1
          fi
          if [ ! -f "netlify.toml" ]; then
            echo "Build output missing - netlify.toml not found in root"
            exit 1
          fi
          echo "Build verification successful - modern ES module format (.mjs) detected"

      - name: Verify TypeScript compilation
        run: |
          echo "‚úÖ Build verification completed"
          echo "üèóÔ∏è Netlify will handle the production build and deployment"

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run npm audit for vulnerabilities
        run: pnpm audit --audit-level moderate || echo "Security audit completed with warnings"

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
          upload: true

      - name: GitHub Advanced Security - Secret Scanning
        run: |
          echo "Secret scanning is automatically enabled for private repos with GitHub Advanced Security"
          echo "For additional secret patterns, configure .gitleaks.toml or similar tools"

  # Coverage aggregation and summary
  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: ./coverage-reports

      - name: Install lcov for coverage merging
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov

      - name: Merge coverage data and create summary
        run: |
          echo "# Coverage Summary for Commit ${{ github.sha }}" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "## Aggregated Coverage Report" >> coverage-summary.md
          echo "" >> coverage-summary.md

          # Find all LCOV files from different test suites
          echo "### Individual Test Suite Coverage Files:" >> coverage-summary.md
          find ./coverage-reports -name "lcov.info" -type f | while read lcov_file; do
            test_suite=$(echo "$lcov_file" | sed 's/.*coverage-\([^/]*\)\/coverage.*/\1/')
            echo "- $test_suite: $lcov_file" >> coverage-summary.md
          done
          echo "" >> coverage-summary.md

          # Create list of valid LCOV files for merging  
          echo "Searching for LCOV files..."
          find ./coverage-reports -name "lcov.info" -type f > all_lcov_files.txt
          echo "Found potential LCOV files:"
          cat all_lcov_files.txt

          # Filter out files that are not valid LCOV (containing only error messages)
          > valid_lcov_files.txt
          while IFS= read -r lcov_file; do
            if [ -f "$lcov_file" ] && grep -q "^SF:" "$lcov_file" 2>/dev/null; then
              echo "$lcov_file" >> valid_lcov_files.txt
              echo "‚úì Valid LCOV: $lcov_file"
            else
              echo "‚ö†Ô∏è  Invalid LCOV: $lcov_file"
            fi
          done < all_lcov_files.txt

          echo "Valid LCOV files for merging:"
          cat valid_lcov_files.txt

          # Merge all valid LCOV files into a single aggregated report
          if [ -s valid_lcov_files.txt ]; then
            mkdir -p ./aggregated-coverage
            echo "Merging coverage files..."
            
            # Build lcov command with proper --add-tracefile flags
            lcov_cmd="lcov"
            while IFS= read -r lcov_file; do
              lcov_cmd="$lcov_cmd --add-tracefile \"$lcov_file\""
            done < valid_lcov_files.txt
            lcov_cmd="$lcov_cmd --output-file ./aggregated-coverage/merged.info"
            
            echo "Executing: $lcov_cmd"
            eval $lcov_cmd
            
            # Generate summary statistics
            echo "### Overall Coverage Statistics:" >> coverage-summary.md
            lcov --summary ./aggregated-coverage/merged.info 2>&1 | tee -a coverage-summary.md
            
            # Generate HTML report
            genhtml ./aggregated-coverage/merged.info --output-directory ./aggregated-coverage/html-report
            
            echo "" >> coverage-summary.md
            echo "### Coverage Report Generated:" >> coverage-summary.md
            echo "- Merged LCOV file: \`./aggregated-coverage/merged.info\`" >> coverage-summary.md
            echo "- HTML report: \`./aggregated-coverage/html-report/index.html\`" >> coverage-summary.md
          else
            echo "‚ùå No LCOV files found for aggregation" >> coverage-summary.md
          fi

          echo "" >> coverage-summary.md
          echo "**Date:** $(date)" >> coverage-summary.md
          echo "**Commit:** ${{ github.sha }}" >> coverage-summary.md

          cat coverage-summary.md

      - name: Upload aggregated coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary-${{ github.sha }}
          path: |
            coverage-summary.md
            aggregated-coverage/
            coverage-reports/
          retention-days: 90

  # CI Success Notification
  ci-success:
    name: CI Pipeline Complete
    runs-on: ubuntu-latest
    needs: [quality, test, build, security, coverage-summary]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.quality.result }}" = "success" ] && \
             [ "${{ needs.test.result }}" = "success" ] && \
             [ "${{ needs.build.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ]; then
            echo "‚úÖ All CI checks passed - Ready for deployment"
            echo "üöÄ Netlify will automatically deploy from main branch"
            exit 0
          else
            echo "‚ùå CI pipeline failed - Deployment blocked"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Tests: ${{ needs.test.result }}" 
            echo "Build: ${{ needs.build.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi
