name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audits daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Type checking
        run: pnpm run type-check

      - name: Linting
        run: pnpm run lint

      - name: Format checking
        run: pnpm run format:check

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tests with coverage
        run: pnpm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Verify build output
        run: |
          if [ ! -f "dist/functions/sync-jobs.js" ]; then
            echo "Build output missing - sync-jobs.js not found"
            exit 1
          fi
          if [ ! -f "dist/netlify.toml" ]; then
            echo "Build output missing - netlify.toml not found"
            exit 1
          fi
          echo "Build verification successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run npm audit for vulnerabilities
        run: pnpm audit --audit-level moderate || echo "Security audit completed with warnings"

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build for production
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Deploy to Netlify
        id: deploy
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful to: ${{ steps.deploy.outputs.url }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          exit 1

  # Performance and Health Checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Health check
        run: |
          # Add health check endpoint when implemented
          echo "Health check placeholder - implement actual endpoint test"

      - name: Performance test
        run: |
          # Add performance testing when needed
          echo "Performance test placeholder"
