name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audits daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Detect Changed Files for Smart Test Selection
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      lib-changed: ${{ steps.changes.outputs.lib }}
      services-changed: ${{ steps.changes.outputs.services }}
      functions-changed: ${{ steps.changes.outputs.functions }}
      scripts-changed: ${{ steps.changes.outputs.scripts }}
      config-changed: ${{ steps.changes.outputs.config }}
      all-tests-required: ${{ steps.check-requirements.outputs.all-tests }}
      test-matrix: ${{ steps.build-matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changed files
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            lib:
              - 'src/lib/**'
              - 'test/lib/**'
            services:
              - 'src/services/**'
              - 'test/services/**'
            functions:
              - 'src/functions/**'
              - 'test/functions/**'
            scripts:
              - 'src/scripts/**'
              - 'test/scripts/**'
            config:
              - '*.json'
              - '*.yml'
              - '*.yaml'
              - '*.toml'
              - '.github/**'
              - 'tsconfig*.json'
              - 'eslint.config.ts'
              - 'vitest.config.ts'

      - name: Check if all tests are required
        id: check-requirements
        run: |
          # Force all tests on main branch, config changes, or scheduled runs
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ steps.changes.outputs.config }}" == "true" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "all-tests=true" >> $GITHUB_OUTPUT
          else
            echo "all-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Build test matrix
        id: build-matrix
        run: |
          if [[ "${{ steps.check-requirements.outputs.all-tests }}" == "true" ]]; then
            # Full test matrix for main branch or config changes
            echo "matrix={\"include\":[{\"name\":\"Config\",\"pattern\":\"test/lib/config.test.ts\",\"category\":\"lib\"},{\"name\":\"HTTP-Client\",\"pattern\":\"test/lib/http-client.test.ts\",\"category\":\"lib\"},{\"name\":\"Environment-Utilities\",\"pattern\":\"test/lib/env.test.ts\",\"category\":\"lib\"},{\"name\":\"Logger\",\"pattern\":\"test/lib/logger.test.ts\",\"category\":\"lib\"},{\"name\":\"Utils\",\"pattern\":\"test/lib/utils.test.ts\",\"category\":\"lib\"},{\"name\":\"Job-Fetch-Utils\",\"pattern\":\"test/lib/job-fetch-utils.test.ts\",\"category\":\"lib\"},{\"name\":\"Performance-Monitor\",\"pattern\":\"test/lib/performance-monitor.test.ts\",\"category\":\"lib\"},{\"name\":\"Telemetry\",\"pattern\":\"test/lib/telemetry.test.ts\",\"category\":\"lib\"},{\"name\":\"Telemetry-Init\",\"pattern\":\"test/lib/telemetry-init.test.ts\",\"category\":\"lib\"},{\"name\":\"Job-Fetcher-Services\",\"pattern\":\"test/services/job-fetcher\",\"category\":\"services\"},{\"name\":\"HTML-Parser-Service\",\"pattern\":\"test/services/html-parser.test.ts\",\"category\":\"services\"},{\"name\":\"WordPress-Client-Service\",\"pattern\":\"test/services/wordpress-client.test.ts\",\"category\":\"services\"},{\"name\":\"Playwright-Scraper-Service\",\"pattern\":\"test/services/playwright-scraper.test.ts\",\"category\":\"services\"},{\"name\":\"Sync-Jobs-Function\",\"pattern\":\"test/functions/sync-jobs.test.ts\",\"category\":\"functions\"},{\"name\":\"Health-Check-Function\",\"pattern\":\"test/functions/health-check.test.ts\",\"category\":\"functions\"},{\"name\":\"Manual-Trigger-Function\",\"pattern\":\"test/functions/manual-trigger.test.ts\",\"category\":\"functions\"},{\"name\":\"Manual-Trigger-Integration\",\"pattern\":\"test/functions/manual-trigger-integration.test.ts\",\"category\":\"functions\"},{\"name\":\"Scrape-and-Sync-Script\",\"pattern\":\"test/scripts/scrape-and-sync.test.ts\",\"category\":\"scripts\"},{\"name\":\"WordPress-Payload-Testing\",\"pattern\":\"test/scripts/test-wordpress-payload.test.ts\",\"category\":\"scripts\"}]}" >> $GITHUB_OUTPUT
          else
            # Smart test selection based on changed files
            tests=()
            
            if [[ "${{ steps.changes.outputs.lib }}" == "true" ]]; then
              tests+=(
                '{"name":"Config","pattern":"test/lib/config.test.ts","category":"lib"}'
                '{"name":"HTTP-Client","pattern":"test/lib/http-client.test.ts","category":"lib"}'
                '{"name":"Environment-Utilities","pattern":"test/lib/env.test.ts","category":"lib"}'
                '{"name":"Logger","pattern":"test/lib/logger.test.ts","category":"lib"}'
                '{"name":"Utils","pattern":"test/lib/utils.test.ts","category":"lib"}'
                '{"name":"Job-Fetch-Utils","pattern":"test/lib/job-fetch-utils.test.ts","category":"lib"}'
                '{"name":"Performance-Monitor","pattern":"test/lib/performance-monitor.test.ts","category":"lib"}'
                '{"name":"Telemetry","pattern":"test/lib/telemetry.test.ts","category":"lib"}'
                '{"name":"Telemetry-Init","pattern":"test/lib/telemetry-init.test.ts","category":"lib"}'
              )
            fi
            
            if [[ "${{ steps.changes.outputs.services }}" == "true" ]]; then
              tests+=(
                '{"name":"Job-Fetcher-Services","pattern":"test/services/job-fetcher","category":"services"}'
                '{"name":"HTML-Parser-Service","pattern":"test/services/html-parser.test.ts","category":"services"}'
                '{"name":"WordPress-Client-Service","pattern":"test/services/wordpress-client.test.ts","category":"services"}'
                '{"name":"Playwright-Scraper-Service","pattern":"test/services/playwright-scraper.test.ts","category":"services"}'
              )
            fi
            
            if [[ "${{ steps.changes.outputs.functions }}" == "true" ]]; then
              tests+=(
                '{"name":"Sync-Jobs-Function","pattern":"test/functions/sync-jobs.test.ts","category":"functions"}'
                '{"name":"Health-Check-Function","pattern":"test/functions/health-check.test.ts","category":"functions"}'
                '{"name":"Manual-Trigger-Function","pattern":"test/functions/manual-trigger.test.ts","category":"functions"}'
                '{"name":"Manual-Trigger-Integration","pattern":"test/functions/manual-trigger-integration.test.ts","category":"functions"}'
              )
            fi
            
            if [[ "${{ steps.changes.outputs.scripts }}" == "true" ]]; then
              tests+=(
                '{"name":"Scrape-and-Sync-Script","pattern":"test/scripts/scrape-and-sync.test.ts","category":"scripts"}'
                '{"name":"WordPress-Payload-Testing","pattern":"test/scripts/test-wordpress-payload.test.ts","category":"scripts"}'
              )
            fi
            
            # If no specific changes detected, run core tests
            if [ ${#tests[@]} -eq 0 ]; then
              tests=(
                '{"name":"Config","pattern":"test/lib/config.test.ts","category":"lib"}'
                '{"name":"HTTP-Client","pattern":"test/lib/http-client.test.ts","category":"lib"}'
                '{"name":"Sync-Jobs-Function","pattern":"test/functions/sync-jobs.test.ts","category":"functions"}'
              )
            fi
            
            # Build JSON properly without trailing commas
            IFS=','
            matrix_json="${tests[*]}"
            IFS=' '
            echo "matrix={\"include\":[$matrix_json]}" >> $GITHUB_OUTPUT
          fi

  # Enhanced Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: detect-changes

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Type checking
        run: pnpm run type-check

      - name: Linting
        run: pnpm run lint

      - name: Format checking
        run: pnpm run format:check

      - name: Enhanced security audit - Moderate level
        run: pnpm run security
        continue-on-error: false

      - name: Enhanced security audit - Production dependencies only
        run: pnpm run security:prod
        continue-on-error: true

      - name: Generate security audit report
        if: always()
        run: |
          echo "## Security Audit Results" > security-report.md
          echo "### Moderate Level Audit" >> security-report.md
          pnpm audit --audit-level moderate --json > security-moderate.json || true
          echo "### Production Dependencies Audit" >> security-report.md  
          pnpm audit --audit-level high --prod --json > security-prod.json || true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            security-*.json
            security-report.md
          retention-days: 30

      - name: Dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Smart Test Execution
  test:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: [detect-changes, quality]
    if: needs.detect-changes.outputs.test-matrix != ''

    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.test-matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            package.json

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ${{ matrix.name }} Tests
        run: pnpm exec vitest run ${{ matrix.pattern }} --coverage
        env:
          NODE_ENV: test
          DRIVEHR_COMPANY_ID: 'test-company-123'
          WP_API_URL: 'https://mock-wordpress-site.example.com'
          WEBHOOK_SECRET: 'mock-webhook-secret-for-ci-testing-12345'

      - name: Upload individual coverage to Codecov
        uses: codecov/codecov-action@v5.5.0
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.name }}
          name: ${{ matrix.name }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.name }}
          path: |
            coverage/
            test-report.junit.xml
          retention-days: 30

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Verify build output
        run: |
          if [ ! -f "dist/functions/sync-jobs.mjs" ]; then
            echo "Build output missing - sync-jobs.mjs not found"
            exit 1
          fi
          if [ ! -f "netlify.toml" ]; then
            echo "Build output missing - netlify.toml not found in root"
            exit 1
          fi
          echo "Build verification successful - modern ES module format (.mjs) detected"

      - name: Verify TypeScript compilation
        run: |
          echo "✅ Build verification completed"
          echo "🏗️ Netlify will handle the production build and deployment"

  # Enhanced Security Scanning
  security:
    name: Enhanced Security Scanning
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: High-severity vulnerability scan
        run: pnpm run security:high
        continue-on-error: true

      - name: Production dependency vulnerability scan
        run: pnpm run security:prod
        continue-on-error: false

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
          upload: true

      - name: GitHub Advanced Security - Secret Scanning
        run: |
          echo "Secret scanning is automatically enabled for private repos with GitHub Advanced Security"
          echo "For additional secret patterns, configure .gitleaks.toml or similar tools"

      - name: Generate comprehensive security report
        if: always()
        run: |
          echo "# 🔒 Comprehensive Security Report" > security-comprehensive-report.md
          echo "Generated on: $(date)" >> security-comprehensive-report.md
          echo "" >> security-comprehensive-report.md

          echo "## Dependency Vulnerabilities" >> security-comprehensive-report.md
          echo "### High-Severity Issues" >> security-comprehensive-report.md
          pnpm audit --audit-level high --json > audit-high.json 2>/dev/null || echo "No high-severity issues found" >> security-comprehensive-report.md

          echo "### Production Dependencies" >> security-comprehensive-report.md  
          pnpm audit --prod --audit-level moderate --json > audit-prod.json 2>/dev/null || echo "No production dependency issues found" >> security-comprehensive-report.md

          echo "## Recommendations" >> security-comprehensive-report.md
          echo "- Run \`pnpm run security:fix\` to auto-resolve fixable vulnerabilities" >> security-comprehensive-report.md
          echo "- Review manual fixes for remaining vulnerabilities" >> security-comprehensive-report.md
          echo "- Consider dependency alternatives for persistent high-risk packages" >> security-comprehensive-report.md

      - name: Upload comprehensive security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-security-results
          path: |
            audit-*.json
            security-comprehensive-report.md
          retention-days: 90

  # CI Success Notification with Enhanced Reporting
  ci-success:
    name: CI Pipeline Complete
    runs-on: ubuntu-latest
    needs: [detect-changes, quality, test, build, security]
    if: always()

    steps:
      - name: Check CI status and generate report
        run: |
          echo "# 🚀 Enhanced CI Pipeline Report" > ci-report.md
          echo "Generated on: $(date)" >> ci-report.md
          echo "" >> ci-report.md

          echo "## Test Optimization Results" >> ci-report.md
          echo "- All tests required: ${{ needs.detect-changes.outputs.all-tests-required }}" >> ci-report.md
          echo "- Lib changes detected: ${{ needs.detect-changes.outputs.lib-changed }}" >> ci-report.md
          echo "- Services changes detected: ${{ needs.detect-changes.outputs.services-changed }}" >> ci-report.md
          echo "- Functions changes detected: ${{ needs.detect-changes.outputs.functions-changed }}" >> ci-report.md
          echo "- Scripts changes detected: ${{ needs.detect-changes.outputs.scripts-changed }}" >> ci-report.md
          echo "- Config changes detected: ${{ needs.detect-changes.outputs.config-changed }}" >> ci-report.md
          echo "" >> ci-report.md

          echo "## Pipeline Results" >> ci-report.md
          echo "- Quality checks: ${{ needs.quality.result }}" >> ci-report.md
          echo "- Tests: ${{ needs.test.result }}" >> ci-report.md
          echo "- Build: ${{ needs.build.result }}" >> ci-report.md
          echo "- Security: ${{ needs.security.result }}" >> ci-report.md

          if [ "${{ needs.quality.result }}" = "success" ] && \
             [ "${{ needs.test.result }}" = "success" ] && \
             [ "${{ needs.build.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ]; then
            echo "✅ All enhanced CI checks passed - Ready for deployment"
            echo "🚀 Netlify will automatically deploy from main branch"
            echo "⚡ Smart test selection optimized CI performance"
            exit 0
          else
            echo "❌ Enhanced CI pipeline failed - Deployment blocked"
            exit 1
          fi

      - name: Upload CI report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: enhanced-ci-report
          path: ci-report.md
          retention-days: 30
